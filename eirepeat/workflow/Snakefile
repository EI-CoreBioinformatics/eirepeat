#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""

Snakemake for EI Repeat Identification Pipeline

"""

# authorship
__author__ = "Gemy George Kaithakottil"
__maintainer__ = "Gemy George Kaithakottil"
__email__ = "gemygk@gmail.com"

# import modules
import os
import sys
import logging
import yaml
import glob
from pathlib import Path
from eirepeat.scripts.jiracomms import post_to_jira, post_attachment_to_jira

from eirepeat.scripts.hpc_config import HpcConfig
HPC_CONFIG = HpcConfig(config["hpc_config"])

# Request min version of snakemake
from snakemake.utils import min_version
min_version("7.0")

# declare variables
cwd = os.getcwd()
jira_id = config["jira"]["jira_id"] # command line
NOTIFY = not config["notify"] # command line
if not os.access(config["jira"]["password_file"], os.R_OK) or not Path(config["jira"]["password_file"]).is_file() or not jira_id:
    print("JIRA notification is disabled")
    NOTIFY = False
output = os.path.abspath(config["output"])
logs_dir = os.path.abspath(config["logs"])
index_dir = os.path.join(output,"index")
index_name = config["prefix"]["index_name"] # DO NOT CHANGE THIS - IF WE DO THEN THE RED REPEATS AND THE REST OF THE PIPELINE NEEDS CAREFUL REVIEW
close_reference_name = config["prefix"]["close_reference_name"] # DO NOT CHANGE THIS
organellar_name = config["prefix"]["organellar_name"] # DO NOT CHANGE THIS
repeatmodeler_dir = os.path.join(output,"RepeatModeler")
interspersed_repeatmodeler_dir = os.path.join(output,"RepeatMasker_interspersed_repeatmodeler")
interspersed_dir = os.path.join(output,"RepeatMasker_interspersed")
low_dir = os.path.join(output,"RepeatMasker_low")
blast_dir = os.path.join(output,"blast")
transposonpsi_dir = os.path.join(output,"transposonpsi")
repeatmodeler_hmask_dir = os.path.join(output,"RepeatMasker_RepeatModeler")
# interspersed_HM_repeatmodeler_dir = os.path.join(output,"RepeatMasker_interspersed_HM_repeatmodeler")
red_dir = os.path.join(output,"red")
run_red_repeats = config["run_red_repeats"]


# DEFINE RUNS
# run1 - RepeatModeler : Raw
run1 = False if (config["organellar_fasta"] or config["close_reference"]) else True
# run2 - RepeatModeler : Organellar
run2 = True if (config["organellar_fasta"] and not config["close_reference"])  else False
# run3 - RepeatModeler : Close Reference
run3 = True if (config["close_reference"] and not config["organellar_fasta"])  else False
# run4 - RepeatModeler : Organellar + Close Reference
run4 = True if (config["organellar_fasta"] and config["close_reference"])  else False

if config['verbose']:
    print("Defined runs:")
    print(f"run1:{run1}")
    print(f"run2:{run2}")
    print(f"run3:{run3}")
    print(f"run4:{run4}")
    print(f"run_red_repeats:{run_red_repeats}")
    print(f"output:{output}")
    print(f"jira_id:{jira_id}")
    print(f"NOTIFY:{NOTIFY}")
    print(f"jira:{config['jira']}")
    print(f"config:{config}")

# # ########### Helper methods ############
def notify(message, attachment=None, jira_filename=None, suffix=None):
    if NOTIFY:
        if attachment:
            if not post_attachment_to_jira(jira_id, message, attachment, name=jira_filename, suffix=suffix, jira_config=config):
                print(f"Failed to POST attachment to JIRA ticket: {jira_id}")
        else:
            if not post_to_jira(jira_id, message, jira_config=config):
                print(f"Failed to POST to JIRA ticket: {jira_id}; Message: {message}")

#######################
# RULES STARTS HERE
#######################

TARGET = [
    # clean_genome
    os.path.join(output, index_name),
    os.path.join(output, index_name + ".done"),

    # rule BuildDatabase
    os.path.join(index_dir, "BuildDatabase.completed"),

    # rule RepeatModeler
    expand(os.path.join(index_dir,"{index_name}-families.{ext}"),index_name=index_name, ext=["fa","stk"]),
    os.path.join(repeatmodeler_dir,"RepeatModeler.completed"),

    # rule RepeatMasker_low
    os.path.join(low_dir, index_name + ".out.gff"),
    os.path.join(low_dir, index_name + ".out.gff3"),
    os.path.join(low_dir,"RepeatMasker_low.completed"),

    # rule RepeatMasker_interspersed
    os.path.join(interspersed_dir, index_name + ".out.gff"),
    os.path.join(interspersed_dir, index_name + ".out.gff3"),
    os.path.join(interspersed_dir,"RepeatMasker_interspersed.completed"),

    # all_repeats
    os.path.join(output, "all_repeats.raw.out.gff"),
    os.path.join(output, "all_repeats.gff3"),
    os.path.join(output, "all_repeats.completed"),

    # all_interspersed_repeats
    os.path.join(output, "all_interspersed_repeats.raw.out.gff"),
    os.path.join(output, "all_interspersed_repeats.gff3"),
    os.path.join(output, "all_interspersed_repeats.completed"),

    os.path.join(output, index_name + ".bed"),
    os.path.join(output, "eirepeat.completed.txt") # all stats from the run is posted using this txt file
]

# RED repeats
if run_red_repeats:
    TARGET.append(os.path.join(red_dir, "output_red_rpt", "genome.rpt"))
    TARGET.append(os.path.join(red_dir, "genome.rpt.bed"))
    TARGET.append(os.path.join(red_dir, "genome.rpt.gff3"))
    TARGET.append(os.path.join(red_dir, "red.completed"))

# DEFINE MAIN RUNS TO EXECUTE
# run1 - RepeatModeler : Raw
if run1 or (not (config["organellar_fasta"] and config["close_reference"])):
    # rule RepeatMasker_interspersed_repeatmodeler
    TARGET.append(os.path.join(interspersed_repeatmodeler_dir, index_name + ".out.gff"))
    TARGET.append( os.path.join(interspersed_repeatmodeler_dir,"RepeatMasker_interspersed_repeatmodeler.completed"))

# run2 - RepeatModeler : Organellar
if config["organellar_fasta"]:

    TARGET.append(os.path.join(output, organellar_name))
    TARGET.append(os.path.join(output, organellar_name + ".done"))

    TARGET.append(os.path.join(blast_dir, index_name + ".unknown.fasta"))
    TARGET.append(os.path.join(blast_dir, index_name + ".unknown.fasta-vs-organellar.blastn.tblr"))
    TARGET.append(os.path.join(blast_dir, index_name + ".unknown.fasta-vs-organellar.blastn.tblr.bed"))
    TARGET.append(os.path.join(blast_dir, index_name + ".organellarGenome.HM.fa"))
    TARGET.append(os.path.join(blast_dir, "blast.completed"))

# run3 - RepeatModeler : Close Reference
if config["close_reference"]:
    count = 0
    with open(config["close_reference"], 'r') as fh:
        for line in fh:
            if line.startswith(">"):
                count += 1
            else:
                continue

    total_chunks = count / config["chunks"]["transposonpsi"]
    # check if there is remainder, then add one more to total chunks
    total_chunks = int(total_chunks) + 1 if (count % config["chunks"]["transposonpsi"] != 0) else 0
    chunk_numbers = list(range(1,total_chunks+1))
    if config['verbose']:
        print("Total number of --close_reference fasta sequences:{1} [{0}]".format(config["close_reference"],count))
        print("Total number of chunks:{0} [{1} per chunk]".format(total_chunks,config["chunks"]["transposonpsi"]))
        # print("Total chunk numbers:{}".format(chunk_numbers))

    # Append TARGET
    TARGET.append(expand(os.path.join("{output}", "chunks", "chunk-{sample}.txt"), output=transposonpsi_dir, sample=chunk_numbers))
    TARGET.append(os.path.join(transposonpsi_dir, "chunks", "chunk_close_reference.completed"))

    # TARGET.append(expand(os.path.join("{output}", "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.{ext}"), output=transposonpsi_dir, sample=chunk_numbers, ext=["allHits", "allHits.chains", "allHits.chains.gff3", "allHits.bestPerLocus", "allHits.bestPerLocus.gff3", "completed"]))

    TARGET.append(expand(os.path.join("{output}", "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.allHits"), output=transposonpsi_dir, sample=chunk_numbers))
    # - from here
    # adding below causes snakemake to delete the files we require
    # TARGET.append(expand(os.path.join("{output}", "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.allHits.chains"), output=transposonpsi_dir, sample=chunk_numbers))
    # TARGET.append(expand(os.path.join("{output}", "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.allHits.chains.gff3"), output=transposonpsi_dir, sample=chunk_numbers))
    # TARGET.append(expand(os.path.join("{output}", "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.allHits.bestPerLocus"), output=transposonpsi_dir, sample=chunk_numbers))
    # TARGET.append(expand(os.path.join("{output}", "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.allHits.bestPerLocus.gff3"), output=transposonpsi_dir, sample=chunk_numbers))
    # - till here
    TARGET.append(expand(os.path.join("{output}", "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.completed"), output=transposonpsi_dir, sample=chunk_numbers))

    # clean_close_reference
    TARGET.append(os.path.join(output, close_reference_name))
    TARGET.append(os.path.join(output, close_reference_name + ".done"))

    TARGET.append(os.path.join(transposonpsi_dir, close_reference_name + ".TPSI.allHits"))
    TARGET.append(os.path.join(transposonpsi_dir, close_reference_name + ".TPSI.allHits.bed"))
    TARGET.append(os.path.join(transposonpsi_dir, close_reference_name + ".TPSI.HMask.fasta"))
    TARGET.append(os.path.join(transposonpsi_dir, "mask_close_reference.completed"))

# run3 - RepeatModeler : Close Reference
# run4 - RepeatModeler : Organellar + Close Reference
if run3 or run4:
    TARGET.append(os.path.join(repeatmodeler_hmask_dir, index_name + ".HM.fa.masked"))
    TARGET.append(os.path.join(repeatmodeler_hmask_dir,"RepeatMasker_RepeatModeler.completed"))

if config['verbose']:
    print("##########")
    print(f"TARGET:{TARGET}")
    print("##########")

shell.prefix("set -eo pipefail; ")

localrules:
    chunk_close_reference,
    mask_close_reference,
    all_repeats,
    all_interspersed_repeats,
    add_stats_to_jira

rule all:
    input:
        TARGET

#######################
# WORKFLOW
#######################

rule clean_genome:
    input:
        fasta = config["fasta"]
    output:
        fasta = os.path.join(output, index_name),
        done = os.path.join(output, index_name + ".done")
    log:
        os.path.join(logs_dir, "clean_genome.log")
    params:
        cwd = output,
        time = config["params"]["time"],
        source = config["source"]["seqkit"],
        extra = "-w 60 -u --only-id"
    threads:
            HPC_CONFIG.get_cores("clean_genome")
    shell:
        "(set +u"
        + " && cd {params.cwd}"
        + " && {params.source} "
        + " && {params.time} seqkit seq {params.extra} -j {threads} {input} -o {output.fasta}"
        + " && chmod 777 {output.fasta}"
        + " && touch {output.done}"
        + ") > {log} 2>&1"

rule red:
    input:
        fasta = rules.clean_genome.output.fasta
    output:
        msk = os.path.join(red_dir, "output_red_rpt", "genome.rpt"),
        bed = os.path.join(red_dir, "genome.rpt.bed"),
        gff = os.path.join(red_dir, "genome.rpt.gff3"),
        completed = os.path.join(red_dir, "red.completed")
    log:
        os.path.join(logs_dir,"red.log")
    params:
        cwd = red_dir,
        time = config["params"]["time"],
        index_name = index_name,
        source = config["source"]["red"]
    threads:
        HPC_CONFIG.get_cores("red")
    shell:
        "(set +u"
        + " && cd {params.cwd} "
        + " && ln -sf {input.fasta} "
        + " && mkdir -p genome_directory output_red_sco output_red_cnd output_red_rpt output_red_msk"
        + " && cd genome_directory "
        + " && ln -sf {input.fasta} "
        + " && cd .. "
        + " && {params.source} "
        + " && {params.time} Red -gnm genome_directory -sco output_red_sco -cnd output_red_cnd -rpt output_red_rpt -msk output_red_msk -hmo output_red_hmo"
        + " && {params.time} red_rpt_to_GFF3 --output_bed {output.bed} --output_gff {output.gff} {output.msk}"
        + " && touch {output.completed}"
        + ") 2> {log}"

rule BuildDatabase:
    input:
        rules.clean_genome.output.fasta
    output:
        os.path.join(index_dir, "BuildDatabase.completed")
    log:
        os.path.join(logs_dir, "BuildDatabase.log")
    params:
        cwd = index_dir,
        name = Path(rules.clean_genome.output.fasta).name,
        extra = "-engine ncbi",
        time = config["params"]["time"],
        source = config["source"]["repeatmodeler"]
    threads:
        HPC_CONFIG.get_cores("BuildDatabase")
    shell:
        "(set +u"
        + " && cd {params.cwd}"
        + " && {params.source}"
        + " && {params.time} BuildDatabase -name {params.name} {params.extra} {input}"
        + " && touch {output}"
        + ") > {log} 2>&1"

# 1. Softmask the assembly with repeatmasker libraries for the lowcomplexity repeats masking

rule RepeatMasker_low:
    input:
        fasta = rules.clean_genome.output.fasta
    output:
        gff = os.path.join(low_dir, index_name + ".out.gff"),
        gff3 = os.path.join(low_dir, index_name + ".out.gff3"),
        completed = os.path.join(low_dir,"RepeatMasker_low.completed")
    log:
        os.path.join(logs_dir,"RepeatMasker_low.log")
    params:
        cwd = low_dir,
        extra = "-engine ncbi -a -xsmall -gff -noint",
        species = config["species"],
        time = config["params"]["time"],
        source = config["source"]["repeatmasker"],
        tag = "RM_low"
    threads:
        HPC_CONFIG.get_cores("RepeatMasker_low")
    shell:
        "(set +u"
        + " && cd {params.cwd} "
        + " && {params.source} "
        + " && {params.time} RepeatMasker {params.extra} -pa {threads} -species {params.species} -dir {params.cwd} {input.fasta}"
        + " && {params.time}  sed -i.bkp 's:\\tRepeatMasker\\t:\\tRepeatMasker_low\\t:' {output.gff}"
        + " && {params.time} repeatmasker_to_GFF3 --tag {params.tag} {output.gff} --output_gff {output.gff3}"
        + " && touch {output.completed}"
        + ") 2> {log}"

# 2. Softmask the genome assembly with repeatmasker libraries (repbase) for the Interspersed repeats masking:

rule RepeatMasker_interspersed:
    input:
        fasta = rules.clean_genome.output.fasta
    output:
        gff = os.path.join(interspersed_dir, index_name + ".out.gff"),
        gff3 = os.path.join(interspersed_dir, index_name + ".out.gff3"),
        completed = os.path.join(interspersed_dir, "RepeatMasker_interspersed.completed")
    log:
        os.path.join(logs_dir,"RepeatMasker_interspersed.log")
    params:
        cwd = interspersed_dir,
        extra = "-engine ncbi -a -xsmall -gff -nolow",
        species = config["species"],
        time = config["params"]["time"],
        source = config["source"]["repeatmasker"],
        tag = "RM_int"
    threads:
        HPC_CONFIG.get_cores("RepeatMasker_interspersed")
    shell:
        "(set +u"
        + " && cd {params.cwd} "
        + " && {params.source} "
        + " && {params.time} RepeatMasker {params.extra} -pa {threads} -species {params.species} -dir {params.cwd} {input.fasta}"
        + " && {params.time}  sed -i.bkp 's:\\tRepeatMasker\\t:\\tRepeatMasker_interspersed\\t:' {output.gff}"
        + " && {params.time} repeatmasker_to_GFF3 --tag {params.tag} {output.gff} --output_gff {output.gff3}"
        + " && touch {output}"
        + ") 2> {log}"


rule RepeatModeler:
    input:
        rules.BuildDatabase.output
    output:
        files = expand(os.path.join(index_dir,"{index_name}-families.{ext}"),index_name = Path(rules.clean_genome.output.fasta).name, ext=["fa","stk"]),
        completed = os.path.join(repeatmodeler_dir,"RepeatModeler.completed")
    log:
        os.path.join(logs_dir, "RepeatModeler.log")
    params:
        cwd = repeatmodeler_dir,
        index = os.path.join(index_dir, Path(rules.clean_genome.output.fasta).name),
        extra = "-engine ncbi -srand 7",
        time = config["params"]["time"],
        source = config["source"]["repeatmodeler"]
    threads:
        HPC_CONFIG.get_cores("RepeatModeler")
    shell:
        "(set +u"
        + " && cd {params.cwd}"
        + " && {params.source}"
        + " && {params.time} RepeatModeler {params.extra} -p {threads} -database {params.index}"
        + " && touch {output.completed}"
        + ") > {log} 2>&1"



if config["organellar_fasta"]:

    rule clean_organellar_fasta:
        input:
            fasta = config["organellar_fasta"]
        output:
            fasta = os.path.join(output, organellar_name),
            done = os.path.join(output, organellar_name + ".done")
        log:
            os.path.join(logs_dir, "clean_organellar_fasta.log")
        params:
            cwd = output,
            time = config["params"]["time"],
            source = config["source"]["seqkit"],
            extra = "-w 60 -u --only-id"
        threads:
                HPC_CONFIG.get_cores("clean_organellar_fasta")
        shell:
            "(set +u"
            + " && cd {params.cwd}"
            + " && {params.source} "
            + " && {params.time} seqkit seq {params.extra} -j {threads} {input} -o {output.fasta}"
            + " && chmod 777 {output.fasta}"
            + " && touch {output.done}"
            + ") > {log} 2>&1"

    # Filter 'Unknown|Other' from RepeatModeler repeats
    rule blast:
        input:
            # get the RepeatModeler fasta file
            repeatmodeler_fasta = rules.RepeatModeler.output.files[0],
            organellar_fasta = rules.clean_organellar_fasta.output.fasta
        output:
            fasta = os.path.join(blast_dir, index_name + ".unknown.fasta"),
            blast = os.path.join(blast_dir, index_name + ".unknown.fasta-vs-organellar.blastn.tblr"),
            blast_bed = os.path.join(blast_dir, index_name + ".unknown.fasta-vs-organellar.blastn.tblr.bed"),
            rmodeler_orgn_hmask = os.path.join(blast_dir, index_name + ".organellarGenome.HM.fa"),
            completed = os.path.join(blast_dir, "blast.completed")
        log:
            os.path.join(logs_dir,"blast.log")
        params:
            cwd = blast_dir,
            time = config["params"]["time"],
            unknown = "'Unknown|Other'",
            basename_repeatmodeler_fasta = Path(rules.RepeatModeler.output.files[0]).name,
            basename_organellar_fasta = organellar_name,
            source_blast = config["source"]["blast"],
            extra = "\'6 qseqid sseqid pident qstart qend sstart send qlen slen length nident mismatch positive gapopen gaps evalue bitscore\'",
            source_seqkit = config["source"]["seqkit"],
            source_bedtools = config["source"]["bedtools"]
        threads:
            HPC_CONFIG.get_cores("blast")
        shell:
            "(set +u"
            + " && cd {params.cwd} "
            + " && ln -sf {input.repeatmodeler_fasta} "
            + " && {params.source_seqkit} "
            + " && {params.time} seqkit grep -r -p {params.unknown} {params.basename_repeatmodeler_fasta} -o {output.fasta}"
            + " && {params.source_blast} "
            + " && ln -sf {input.organellar_fasta} "
            + " && {params.time} makeblastdb -dbtype nucl -in {params.basename_organellar_fasta} -input_type fasta"
            + " && {params.time} blastn -task blastn -query {output.fasta} -db {params.basename_organellar_fasta} -evalue 1e-5 -num_threads {threads} -outfmt {params.extra} -out {output.blast}"
            + """ && {params.time} cat {output.blast} | {params.time} awk -F '\\t' '{{print $1\"\\t\"$4-1\"\\t\"$5}}' | sort -u > {output.blast_bed}"""
            + " && {params.source_bedtools} "
            + " && {params.time} maskFastaFromBed -fi {params.basename_repeatmodeler_fasta} -bed {output.blast_bed} -fo {output.rmodeler_orgn_hmask} "
            + " && touch {output.completed}"
            + ") 2> {log}"


if config["close_reference"]:

    rule clean_close_reference:
        input:
            fasta = config["close_reference"]
        output:
            fasta = os.path.join(output, close_reference_name),
            done = os.path.join(output, close_reference_name + ".done")
        log:
            os.path.join(logs_dir, "clean_close_reference.log")
        params:
            cwd = output,
            time = config["params"]["time"],
            source = config["source"]["seqkit"],
            extra = "-w 60 -u --only-id"
        threads:
                HPC_CONFIG.get_cores("clean_close_reference")
        shell:
            "(set +u"
            + " && cd {params.cwd}"
            + " && {params.source} "
            + " && {params.time} seqkit seq {params.extra} -j {threads} {input} -o {output.fasta}"
            + " && chmod 777 {output.fasta}"
            + " && touch {output.done}"
            + ") > {log} 2>&1"

    rule chunk_close_reference:
        input:
            fasta = rules.clean_close_reference.output.fasta
        output:
            expand(os.path.join("{output}", "chunks", "chunk-{sample}.txt"), output=transposonpsi_dir, sample=chunk_numbers),
            completed = os.path.join(transposonpsi_dir, "chunks", "chunk_close_reference.completed")
        log:
            os.path.join(logs_dir,"chunk_close_reference.log")
        params:
            cwd = os.path.join(transposonpsi_dir, "chunks"),
            transposonpsi_dir = transposonpsi_dir,
            time = config["params"]["time"],
            basename = close_reference_name,
            prefix = "chunk",
            chunksize = config["chunks"]["transposonpsi"]
        shell:
            "(set +u"
            + " && cd {params.transposonpsi_dir} "
            + " && ln -sf {input.fasta} "
            + " && cd {params.cwd} "
            + " && ln -sf {input.fasta} "
            # awk script by Pierre Lindenbaum https://www.biostars.org/p/13270/
            + " && {params.time} awk 'BEGIN {{n=0;m=1;}} /^>/ {{ if (n%{params.chunksize}==0) {{f=sprintf(\"{params.cwd}/chunk-%d.txt\",m); m++;}}; n++; }} {{ print >> f }}' {params.basename}"
            + " && touch {output.completed}"
            + ") 2> {log}"

    rule transposonpsi:
        input:
            os.path.join(transposonpsi_dir, "chunks", "chunk-{sample}.txt")
        output:
            allHits = os.path.join(transposonpsi_dir, "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.allHits"),
            # - from here
            # adding below causes snakemake to delete the files we require
            # chains = os.path.join(transposonpsi_dir, "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.allHits.chains"),
            # chains_gff3 = os.path.join(transposonpsi_dir, "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.allHits.chains.gff3"),
            # bestPerLocus = os.path.join(transposonpsi_dir, "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.allHits.bestPerLocus"),
            # bestPerLocus_gff3 = os.path.join(transposonpsi_dir, "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.allHits.bestPerLocus.gff3"),
            # - till here
            completed = os.path.join(transposonpsi_dir, "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.completed")
        log:
            os.path.join(logs_dir, "transposonpsi", "chunk-{sample}.log")
        params:
            cwd = os.path.join(transposonpsi_dir, "output_chunks", "chunk-{sample}"),
            time = config["params"]["time"],
            source = config["source"]["transposonpsi"],
            basename = Path(os.path.join(transposonpsi_dir, "chunks", "chunk-{sample}.txt")).name
        threads:
            HPC_CONFIG.get_cores("transposonpsi")
        shell:
            "(set +u"
            + " && cd {params.cwd} "
            + " && ln -sf {input} "
            + " && {params.source} "
            + " && {params.time} transposonPSI.pl {params.basename} nuc "
            + " && touch {output.completed}"
            + ") 2> {log}"


    rule mask_close_reference:
        input:
            fasta = rules.clean_close_reference.output.fasta,
            allHits = expand(os.path.join("{output}", "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.allHits"), output=transposonpsi_dir, sample=chunk_numbers),
            completed = expand(os.path.join("{output}", "output_chunks", "chunk-{sample}", "chunk-{sample}.txt.TPSI.completed"), output=transposonpsi_dir, sample=chunk_numbers)
        output:
            allHits = os.path.join(transposonpsi_dir, close_reference_name + ".TPSI.allHits"),
            allHits_bed = os.path.join(transposonpsi_dir, close_reference_name + ".TPSI.allHits.bed"),
            fasta = os.path.join(transposonpsi_dir, close_reference_name + ".TPSI.HMask.fasta"),
            completed = os.path.join(transposonpsi_dir, "mask_close_reference.completed")
        log:
            os.path.join(logs_dir, "mask_close_reference.log")
        params:
            cwd = os.path.join(transposonpsi_dir),
            time = config["params"]["time"],
            source = config["source"]["bedtools"],
            allHits = os.path.join("output_chunks", "chunk-*", "chunk-*.txt.TPSI.allHits")
        shell:
            "(set +u"
            + " && cd {params.cwd} "
            + " && cat {params.allHits} > {output.allHits} "
            + " && cat {output.allHits} | awk -F \"\\t\" '{{ if($9>$10) {{print $6\"\\t\"$10-1\"\\t\"$9}} else {{print $6\"\\t\"$9-1\"\\t\"$10}} }}' > {output.allHits_bed} "
            + " && {params.source} "
            + " && {params.time} maskFastaFromBed -fi {input.fasta} -bed {output.allHits_bed} -fo {output.fasta} "
            + " && touch {output.completed}"
            + ") 2> {log}"

    # HM the RepeatModeler library with transposons removed CDS of closely related species on:
    # 1. Either the raw RepeatModeler libary
    # OR
    # 2. the RepeatModeler libary which is hardmasked by the organellar genomes

    rule RepeatMasker_RepeatModeler:
        input:
            repeatmodeler_fasta = rules.blast.output.rmodeler_orgn_hmask if run4 else rules.RepeatModeler.output.files[0],
            close_reference_hmask = rules.mask_close_reference.output.fasta
        output:
            masked_fasta = os.path.join(repeatmodeler_hmask_dir, index_name + ".HM.fa.masked"),
            completed = os.path.join(repeatmodeler_hmask_dir,"RepeatMasker_RepeatModeler.completed")
        log:
            os.path.join(logs_dir,"RepeatMasker_RepeatModeler.log")
        params:
            cwd = repeatmodeler_hmask_dir,
            extra = "-engine ncbi -a -x -gff -nolow",
            time = config["params"]["time"],
            source = config["source"]["repeatmasker"],
            # one name for files comming from different routes
            basename = index_name + ".HM.fa",
            bname_repeatmodeler_fasta = Path(rules.blast.output.rmodeler_orgn_hmask).name if run4 else Path(rules.RepeatModeler.output.files[0]).name,
            bname_close_reference_hmask = Path(rules.mask_close_reference.output.fasta).name
        threads:
            HPC_CONFIG.get_cores("RepeatMasker_RepeatModeler")
        shell:
            "(set +u"
            + " && cd {params.cwd} "
            + " && ln -sf {input.repeatmodeler_fasta} {params.basename}"
            + " && ln -sf {input.close_reference_hmask} "
            + " && {params.source} "
            + " && {params.time} RepeatMasker {params.extra} -pa {threads} -dir {params.cwd} -lib {params.bname_close_reference_hmask} {params.basename}"
            + " && if [[ $? -eq 0 && ! -e 'genome.fa.HM.fa.masked' ]]; then cp -L genome.fa.HM.fa genome.fa.HM.fa.masked; fi"
            + " && touch {output.completed}"
            + ") 2> {log}"

# 3 Softmask the assembly with the Rmodeler library for the Interspersed repeats masking:

rule RepeatMasker_interspersed_repeatmodeler:
    input:
        fasta = rules.clean_genome.output.fasta,
        # run1 : Raw : rules.RepeatModeler.output.files[0]
        # run2 : Organellar : rules.blast.output.rmodeler_orgn_hmask
        # run3 : Close Reference : RepeatMasker_RepeatModeler.output.masked_fasta
        # run4 : Organellar + Close Reference : RepeatMasker_RepeatModeler.output.masked_fasta
        repeatmodeler_fasta = rules.RepeatModeler.output.files[0] if run1 else (rules.blast.output.rmodeler_orgn_hmask if run2 else rules.RepeatMasker_RepeatModeler.output.masked_fasta)
    output:
        gff = os.path.join(interspersed_repeatmodeler_dir, index_name + ".out.gff"),
        gff3 = os.path.join(interspersed_repeatmodeler_dir, index_name + ".out.gff3"),
        completed = os.path.join(interspersed_repeatmodeler_dir, "RepeatMasker_interspersed_repeatmodeler.completed")
    log:
        os.path.join(logs_dir,"RepeatMasker_interspersed_repeatmodeler.log")
    params:
        cwd = interspersed_repeatmodeler_dir,
        extra = "-engine ncbi -a -xsmall -gff -nolow",
        time = config["params"]["time"],
        source = config["source"]["repeatmasker"],
        tag = "RM_int_rmod"
    threads:
        HPC_CONFIG.get_cores("RepeatMasker_interspersed_repeatmodeler")
    shell:
        "(set +u"
        + " && cd {params.cwd} "
        + " && {params.source} "
        + " && {params.time} RepeatMasker {params.extra} -pa {threads} -lib {input.repeatmodeler_fasta} -dir {params.cwd} {input.fasta}"
        + " && {params.time}  sed -i.bkp 's:\\tRepeatMasker\\t:\\tRepeatMasker_interspersed_repeatmodeler\\t:' {output.gff}"
        + " && {params.time} repeatmasker_to_GFF3 --tag {params.tag} {output.gff} --output_gff {output.gff3}"
        + " && touch {output.completed}"
        + ") 2> {log}"

## Now combine all the repeats to one file:
rule all_repeats:
    input:
        low_gff = rules.RepeatMasker_low.output.gff,
        interspersed_repbase_gff = rules.RepeatMasker_interspersed.output.gff,
        interspersed_rmodeler_gff = rules.RepeatMasker_interspersed_repeatmodeler.output.gff,
        low_gff3 = rules.RepeatMasker_low.output.gff3,
        interspersed_repbase_gff3 = rules.RepeatMasker_interspersed.output.gff3,
        interspersed_rmodeler_gff3 = rules.RepeatMasker_interspersed_repeatmodeler.output.gff3
    output:
        gff = os.path.join(output, "all_repeats.raw.out.gff"),
        gff3 = os.path.join(output, "all_repeats.gff3"),
        completed = os.path.join(output, "all_repeats.completed")
    log:
        os.path.join(logs_dir, "all_repeats.log")
    params:
        cwd = os.path.join(output),
        time = config["params"]["time"]
    shell:
        "(set +u"
        + " && cd {params.cwd} "
        + " && cat {input.low_gff} {input.interspersed_repbase_gff} {input.interspersed_rmodeler_gff} | grep -v '^#' | clean_GFF3_source --source all_repeats > {output.gff} "
        + " && cat {input.low_gff3} {input.interspersed_repbase_gff3} {input.interspersed_rmodeler_gff3} | add_directives_GFF3 --type match --source all_repeats > {output.gff3} "
        + " && touch {output.completed}"
        + ") 2> {log}"

## Now combine all the interspersed repeats to one file:
rule all_interspersed_repeats:
    input:
        interspersed_repbase_gff = rules.RepeatMasker_interspersed.output.gff,
        interspersed_rmodeler_gff = rules.RepeatMasker_interspersed_repeatmodeler.output.gff,
        interspersed_repbase_gff3 = rules.RepeatMasker_interspersed.output.gff3,
        interspersed_rmodeler_gff3 = rules.RepeatMasker_interspersed_repeatmodeler.output.gff3
    output:
        gff = os.path.join(output, "all_interspersed_repeats.raw.out.gff"),
        gff3 = os.path.join(output, "all_interspersed_repeats.gff3"),
        completed = os.path.join(output, "all_interspersed_repeats.completed")
    log:
        os.path.join(logs_dir, "all_interspersed_repeats.log")
    params:
        cwd = os.path.join(output),
        time = config["params"]["time"]
    shell:
        "(set +u"
        + " && cd {params.cwd} "
        + " && cat {input.interspersed_repbase_gff} {input.interspersed_rmodeler_gff} | grep -v '^#' | clean_GFF3_source --source all_interspersed_repeats > {output.gff} "
        + " && cat {input.interspersed_repbase_gff3} {input.interspersed_rmodeler_gff3} | add_directives_GFF3 --type match --source all_interspersed_repeats > {output.gff3} "
        + " && touch {output.completed}"
        + ") 2> {log}"

# add stats
rule add_stats_to_jira:
    input:
        fasta = rules.clean_genome.output.fasta,
        all_repeats_gff = rules.all_repeats.output.gff,
        all_repeats_gff3 = rules.all_repeats.output.gff3,
        all_repeats = rules.all_repeats.output.completed,
        all_interspersed_repeats_gff = rules.all_interspersed_repeats.output.gff,
        all_interspersed_repeats_gff3 = rules.all_interspersed_repeats.output.gff3,
        all_interspersed_repeats = rules.all_interspersed_repeats.output.completed,
        red_repeats_bed = rules.red.output.bed if run_red_repeats else rules.clean_genome.output.fasta,
        red_repeats_gff = rules.red.output.gff if run_red_repeats else rules.clean_genome.output.fasta,
        red_repeats = rules.red.output.completed if run_red_repeats else rules.clean_genome.output.fasta
    output:
        bed = os.path.join(output, Path(rules.clean_genome.output.fasta).name + ".bed"),
        txt = os.path.join(output, "eirepeat.completed.txt")
    log:
        os.path.join(logs_dir, "add_stats_to_jira.log")
    params:
        cwd = output,
        time = config["params"]["time"],
        du = config["params"]["du"],
        title = "EI Repeat Analysis",
        eirepeat_stats = os.path.join(output, "eirepeat.stats.txt"),
        storage_details = os.path.join(output, "storage_details.txt"),
        source_seqkit = config["source"]["seqkit"]
    run:
        shell("""cd {params.cwd} && {params.source_seqkit} && {params.time} seqkit fx2tab --only-id -n --length {input.fasta} | awk '{{OFS=\"\\t\";print $1,"0",$2}}' > {output.bed}""")

        shell("""echo -ne \"\\nEI Repeat Summary Stats:\\n\" > {params.eirepeat_stats}""")

        # All repeats
        shell("""echo -ne \"All repeats (low + interspersed)\\n\" >> {params.eirepeat_stats} && {params.time} compute_coverage --bed3_file {output.bed} --gff_file {input.all_repeats_gff} | awk '{{bases+=$6;masked+=$5;scaff+=1}} END {{print \"Total Sequences\\t\"scaff\"\\nTotal Bases\\t\"bases\"\\nTotal Masked bases\\t\"masked\"\\nTotal Percentage Bases Masked\\t\"masked/bases*100}}' | tabulate -s \"\\t\" -f tsv --float=.2f | sed 's:.00::' >> {params.eirepeat_stats}  && echo -ne \"\\n\" >> {params.eirepeat_stats}""")

        # All interspersed repeats
        shell("""echo -ne \"All interspersed repeats (interspersed)\\n\" >> {params.eirepeat_stats} && {params.time} compute_coverage --bed3_file {output.bed} --gff_file {input.all_interspersed_repeats_gff} | awk '{{bases+=$6;masked+=$5;scaff+=1}} END {{print \"Total Sequences\\t\"scaff\"\\nTotal Bases\\t\"bases\"\\nTotal Masked bases\\t\"masked\"\\nTotal Percentage Bases Masked\\t\"masked/bases*100}}' | tabulate -s \"\\t\" -f tsv --float=.2f | sed 's:.00::' >> {params.eirepeat_stats}  && echo -ne \"\\n\" >> {params.eirepeat_stats}""")

        if run_red_repeats:
            # RED repeats
            shell("""echo -ne \"RED repeats\\n\" >> {params.eirepeat_stats} && {params.time} compute_coverage --bed3_file {output.bed} --gff_file {input.red_repeats_gff} --gff_type match_part | awk '{{bases+=$6;masked+=$5;scaff+=1}} END {{print \"Total Sequences\\t\"scaff\"\\nTotal Bases\\t\"bases\"\\nTotal Masked bases\\t\"masked\"\\nTotal Percentage Bases Masked\\t\"masked/bases*100}}' | tabulate -s \"\\t\" -f tsv --float=.2f | sed 's:.00::' >> {params.eirepeat_stats}  && echo -ne \"\\n\" >> {params.eirepeat_stats}""")

        shell("""echo -ne \"\\nOutput directory:\\n\" > {params.storage_details} && {params.du} {params.cwd} >> {params.storage_details} && echo -ne \"\\n\" >> {params.storage_details}""")

        with open(params.eirepeat_stats, mode='r') as in_file1, \
            open(params.storage_details, mode='r') as in_file2, \
            open(output.txt, "w") as out_file:
            out_file.write(f"{params.title}\n")
            out_file.write(f"\nRun directory:\n{config['output']}\n")
            out_file.write(f"\nAll repeats (low + interspersed):\n")
            out_file.write(f"{input.all_repeats_gff}\n")
            out_file.write(f"{input.all_repeats_gff3}\n")
            out_file.write(f"\nAll interspersed repeats (interspersed):\n")
            out_file.write(f"{input.all_interspersed_repeats_gff}\n")
            out_file.write(f"{input.all_interspersed_repeats_gff3}\n")
            if run_red_repeats:
                out_file.write(f"\nRED Repeats:\n")
                out_file.write(f"{input.red_repeats_gff}\n")
            for line in in_file1:
                out_file.write(f'{line}')
            out_file.write("\nStorage details")
            for line in in_file2:
                out_file.write(f'{line}')
        notify(f"Attaching {params.title} Report: ", output.txt, jira_filename=f"{Path(output.txt).name}")
        notify(output.txt)
